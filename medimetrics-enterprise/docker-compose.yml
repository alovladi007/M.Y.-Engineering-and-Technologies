version: '3.9'

x-common-variables: &common-variables
  NODE_ENV: ${NODE_ENV:-development}
  LOG_LEVEL: ${LOG_LEVEL:-info}
  TZ: ${TZ:-UTC}

services:
  # Database
  postgres:
    image: postgres:16-alpine
    container_name: medimetrics-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-medimetrics}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medimetrics
    restart: unless-stopped

  # Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: medimetrics-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medimetrics
    restart: unless-stopped

  # Object Storage
  minio:
    image: minio/minio:latest
    container_name: medimetrics-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-medimetrics}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-medimetricssecret}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - medimetrics
    restart: unless-stopped

  # DICOM Server
  orthanc:
    image: orthancteam/orthanc:latest
    container_name: medimetrics-orthanc
    command: /run/secrets/
    environment:
      ORTHANC__NAME: "MediMetrics DICOM Server"
      ORTHANC__DICOM_SERVER_ENABLED: "true"
      ORTHANC__DICOM_AET: "MEDIMETRICS"
      ORTHANC__DICOM_PORT: 4242
      ORTHANC__HTTP_SERVER_ENABLED: "true"
      ORTHANC__AUTHENTICATION_ENABLED: "true"
      ORTHANC__REGISTERED_USERS: |
        {"orthanc": "orthanc"}
      ORTHANC__DICOM_WEB: "true"
      ORTHANC__STORAGE_DIRECTORY: "/var/lib/orthanc/db"
      ORTHANC__INDEX_DIRECTORY: "/var/lib/orthanc/index"
    volumes:
      - orthanc_data:/var/lib/orthanc/db
      - orthanc_index:/var/lib/orthanc/index
      - ./dicom/orthanc.json:/etc/orthanc/orthanc.json:ro
    ports:
      - "8042:8042"
      - "4242:4242"
    networks:
      - medimetrics
    restart: unless-stopped

  # NestJS API
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: medimetrics-api
    environment:
      <<: *common-variables
      PORT: 8000
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-medimetrics}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-medimetrics}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-medimetricssecret}
      S3_REGION: ${S3_REGION:-us-east-1}
      S3_BUCKET_RAW: ${S3_BUCKET_RAW:-medimetrics-raw}
      S3_BUCKET_DERIV: ${S3_BUCKET_DERIV:-medimetrics-derivatives}
      S3_BUCKET_REPORTS: ${S3_BUCKET_REPORTS:-medimetrics-reports}
      ORTHANC_URL: http://orthanc:8042
      ORTHANC_USER: orthanc
      ORTHANC_PASS: orthanc
      JWT_SECRET: ${JWT_SECRET:-devsecret-change-in-production}
      CSRF_SECRET: ${CSRF_SECRET:-devcsrf-change-in-production}
      FIELD_ENCRYPTION_KEK: ${FIELD_ENCRYPTION_KEK:-devkek-change-in-production}
      WEBHOOK_HMAC_SECRET: ${WEBHOOK_HMAC_SECRET:-devhmac-change-in-production}
      INFERENCE_SERVICE_URL: http://inference:9200
      RATE_LIMIT_GLOBAL: ${RATE_LIMIT_GLOBAL:-1000/minute}
      RATE_LIMIT_AUTH: ${RATE_LIMIT_AUTH:-10/minute}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
      ENABLE_SWAGGER: ${ENABLE_SWAGGER:-true}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
    volumes:
      - ./apps/api:/app
      - /app/node_modules
      - ./packages/shared:/packages/shared:ro
    ports:
      - "8000:8000"
      - "9100:9100" # Metrics port
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - medimetrics
    restart: unless-stopped

  # Next.js Web App
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: medimetrics-web
    environment:
      <<: *common-variables
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-devsecret-change-in-production}
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
      - ./packages/shared:/packages/shared:ro
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - medimetrics
    restart: unless-stopped

  # FastAPI Inference Service
  inference:
    build:
      context: ./apps/inference
      dockerfile: Dockerfile
    container_name: medimetrics-inference
    environment:
      <<: *common-variables
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/1
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-medimetrics}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-medimetricssecret}
      S3_BUCKET_RAW: ${S3_BUCKET_RAW:-medimetrics-raw}
      S3_BUCKET_DERIV: ${S3_BUCKET_DERIV:-medimetrics-derivatives}
      WEBHOOK_URL: http://api:8000/inference/webhook
      WEBHOOK_HMAC_SECRET: ${WEBHOOK_HMAC_SECRET:-devhmac-change-in-production}
      MODEL_CACHE_DIR: /models
      ENABLE_GPU: ${ENABLE_GPU:-false}
      MAX_WORKERS: ${MAX_WORKERS:-4}
      PROMETHEUS_PORT: 9200
    volumes:
      - ./apps/inference:/app
      - model_cache:/models
      - inference_temp:/tmp
    ports:
      - "9200:9200"
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    networks:
      - medimetrics
    restart: unless-stopped

  # RQ Worker for background jobs
  worker:
    build:
      context: ./apps/inference
      dockerfile: Dockerfile
    container_name: medimetrics-worker
    command: rq worker --url redis://:${REDIS_PASSWORD:-redis123}@redis:6379/1 inference_queue report_queue
    environment:
      <<: *common-variables
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/1
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-medimetrics}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-medimetricssecret}
      S3_BUCKET_RAW: ${S3_BUCKET_RAW:-medimetrics-raw}
      S3_BUCKET_DERIV: ${S3_BUCKET_DERIV:-medimetrics-derivatives}
      WEBHOOK_URL: http://api:8000/inference/webhook
      WEBHOOK_HMAC_SECRET: ${WEBHOOK_HMAC_SECRET:-devhmac-change-in-production}
      MODEL_CACHE_DIR: /models
      ENABLE_GPU: ${ENABLE_GPU:-false}
    volumes:
      - ./apps/inference:/app
      - model_cache:/models
      - inference_temp:/tmp
    depends_on:
      - redis
      - minio
    deploy:
      replicas: ${WORKER_REPLICAS:-2}
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    networks:
      - medimetrics
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: medimetrics-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - medimetrics
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: medimetrics-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-clock-panel
      GF_SERVER_ROOT_URL: http://localhost:3001
    volumes:
      - ./infra/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - medimetrics
    restart: unless-stopped

  # Nginx (Production Profile)
  nginx:
    image: nginx:alpine
    container_name: medimetrics-nginx
    profiles: ["prod"]
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/sites:/etc/nginx/sites-enabled:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - api
    networks:
      - medimetrics
    restart: unless-stopped

  # Backup Service (Production Profile)
  backup:
    image: offen/docker-volume-backup:latest
    container_name: medimetrics-backup
    profiles: ["prod"]
    environment:
      BACKUP_SOURCES: /backup
      BACKUP_CRON_EXPRESSION: "0 2 * * *"
      BACKUP_RETENTION_DAYS: "30"
      AWS_S3_BUCKET_NAME: ${BACKUP_S3_BUCKET:-medimetrics-backups}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - postgres_data:/backup/postgres:ro
      - minio_data:/backup/minio:ro
      - orthanc_data:/backup/orthanc:ro
    networks:
      - medimetrics
    restart: unless-stopped

networks:
  medimetrics:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  orthanc_data:
  orthanc_index:
  model_cache:
  inference_temp:
  prometheus_data:
  grafana_data:
  nginx_cache:
  nginx_logs: